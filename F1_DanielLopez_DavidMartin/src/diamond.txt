public Tessela minLargeDiamond(BufferedImage image, Tessela t, int threshold, int seekRange){

    Map<Tessela, Integer> largeDiamond = new HashMap<>();
    BufferedImage temp;
    int calc;
    Tessela tesTemp;
    int sx = seekRange*t.w;
    int sy = seekRange*t.h;
    // X+2S Y
    tesTemp = new Tessela(new Pair(t.p.x+2*sx, t.p.y), t.w, t.h);
    temp = image.getSubimage(tesTemp.p.x, tesTemp.p.y, tesTemp.w, tesTemp.h);
    calc = tilesMatch(image, temp);
    largeDiamond.put(tesTemp, calc);

    // X-2S Y
    tesTemp = new Tessela(new Pair(t.p.x-2*sx, t.p.y), t.w, t.h);
    temp = image.getSubimage(tesTemp.p.x, tesTemp.p.y, tesTemp.w, tesTemp.h);
    calc = tilesMatch(image, temp);
    largeDiamond.put(tesTemp, calc);


    // X Y+2S
    tesTemp = new Tessela(new Pair(t.p.x, t.p.y+2*sy), t.w, t.h);
    temp = image.getSubimage(tesTemp.p.x, tesTemp.p.y, tesTemp.w, tesTemp.h);
    calc = tilesMatch(image, temp);
    largeDiamond.put(tesTemp, calc);

    // X Y-2S
    tesTemp = new Tessela(new Pair(t.p.x, t.p.y-2*sy), t.w, t.h);
    temp = image.getSubimage(tesTemp.p.x, tesTemp.p.y, tesTemp.w, tesTemp.h);
    calc = tilesMatch(image, temp);
    largeDiamond.put(tesTemp, calc);

    // X+S Y+S
    tesTemp = new Tessela(new Pair(t.p.x+sx, t.p.y+sy), t.w, t.h);
    temp = image.getSubimage(tesTemp.p.x, tesTemp.p.y, tesTemp.w, tesTemp.h);
    calc = tilesMatch(image, temp);
    largeDiamond.put(tesTemp, calc);

    // X-S Y-S
    tesTemp = new Tessela(new Pair(t.p.x-sx, t.p.y-sy), t.w, t.h);
    temp = image.getSubimage(tesTemp.p.x, tesTemp.p.y, tesTemp.w, tesTemp.h);
    calc = tilesMatch(image, temp);
    largeDiamond.put(tesTemp, calc);

    // X-S Y+S
    tesTemp = new Tessela(new Pair(t.p.x-sx, t.p.y+sy), t.w, t.h);
    temp = image.getSubimage(tesTemp.p.x, tesTemp.p.y, tesTemp.w, tesTemp.h);
    calc = tilesMatch(image, temp);
    largeDiamond.put(tesTemp, calc);

    // X+S Y-S
    tesTemp = new Tessela(new Pair(t.p.x+sx, t.p.y-sy), t.w, t.h);
    temp = image.getSubimage(tesTemp.p.x, tesTemp.p.y, tesTemp.w, tesTemp.h);
    calc = tilesMatch(image, temp);
    largeDiamond.put(tesTemp, calc);

    // Center xy as first min value
    temp = image.getSubimage(t.p.x, t.p.y, t.w, t.h);
    Tessela minTessela = t;
    int minValue = tilesMatch(image, temp);

    // Get minimum value
    for(Map.Entry<Tessela, Integer> entry : largeDiamond.entrySet()) {
        Tessela key = entry.getKey();
        int value = entry.getValue();

        if (value < minValue){
            minValue = value;
            minTessela = key;
        }
    }

    return minTessela;
}


public Tessela minLittleDiamond(BufferedImage image, Tessela t, int threshold, int seekRange){
    Map<Tessela, Integer> littleDiamond = new HashMap<>();
    BufferedImage temp;
    int calc;
    Tessela tesTemp;
    int sx = (seekRange/2)*t.w;
    int sy = (seekRange/2)*t.h;
    // X+S Y
    tesTemp = new Tessela(new Pair(t.p.x+sx, t.p.y), t.w, t.h);
    temp = image.getSubimage(tesTemp.p.x, tesTemp.p.y, tesTemp.w, tesTemp.h);
    calc = tilesMatch(image, temp);
    littleDiamond.put(tesTemp, calc);

    // X-S Y
    tesTemp = new Tessela(new Pair(t.p.x-sx, t.p.y), t.w, t.h);
    temp = image.getSubimage(tesTemp.p.x, tesTemp.p.y, tesTemp.w, tesTemp.h);
    calc = tilesMatch(image, temp);
    littleDiamond.put(tesTemp, calc);


    // X Y+S
    tesTemp = new Tessela(new Pair(t.p.x, t.p.y+sy), t.w, t.h);
    temp = image.getSubimage(tesTemp.p.x, tesTemp.p.y, tesTemp.w, tesTemp.h);
    calc = tilesMatch(image, temp);
    littleDiamond.put(tesTemp, calc);

    // X Y-S
    tesTemp = new Tessela(new Pair(t.p.x, t.p.y-sy), t.w, t.h);
    temp = image.getSubimage(tesTemp.p.x, tesTemp.p.y, tesTemp.w, tesTemp.h);
    calc = tilesMatch(image, temp);
    littleDiamond.put(tesTemp, calc);



    // Center xy as first min value
    temp = image.getSubimage(t.p.x, t.p.y, t.w, t.h);
    Tessela minTessela = t;
    int minValue = tilesMatch(image, temp);

    // Get minimum value
    for(Map.Entry<Tessela, Integer> entry : littleDiamond.entrySet()) {
        Tessela key = entry.getKey();
        int value = entry.getValue();

        if (value < minValue){
            minValue = value;
            minTessela = key;
        }
    }

    return minTessela;
}
